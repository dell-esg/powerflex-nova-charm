# Source charm: ./tox.ini
# This file is managed centrally by release-tools and should not be modified
# within individual charm repos.  See the 'global' dir contents for available
# choices of tox.ini for OpenStack Charms:
#     https://github.com/openstack-charmers/release-tools

[tox]
no_package = True
skip_missing_interpreters = True
env_list = format, lint, static, unit, pep8, py3
min_version = 4.0.0

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
;lib_path = {tox_root}/lib/charms/operator_name_with_underscores
all_path = {[vars]src_path} {[vars]tests_path}

[testenv]
basepython = python3
set_env =
    PYTHONPATH = {tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=pdb.set_trace
    PY_COLORS=1
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
install_command =
  pip install {opts} {packages}
commands = stestr run --slowest {posargs}
allowlist_externals =
  git
  charmcraft
deps =
  -r{toxinidir}/test-requirements.txt

[testenv:format]
description = Apply coding style standards to code
deps =
    black
    ruff
commands =
    black {[vars]all_path}
    ruff --fix {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    flake8
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
    codespell
commands =
    codespell {[vars]all_path} 
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 --exclude {[vars]lib_path} --config {toxinidir}/pyproject.toml {[vars]all_path}
    isort --check-only --diff {[vars]all_path} --skip-glob {[vars]lib_path}
    black  --config {[vars]pyproject_toml} --check --diff {[vars]all_path} --exclude {[vars]lib_path}

[testenv:py3]
basepython = python3
deps =
  {[testenv]deps}
  -r{toxinidir}/requirements.txt

[testenv:pep8]
description = Alias for lint
deps = {[testenv:lint]deps}
commands = {[testenv:lint]commands}

[testenv:unit]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    -r {tox_root}/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
                 -m pytest \
                 --tb native \
                 -v \
                 -s \
                 {posargs} \
                 {[vars]tests_path}/unit
    coverage report

[testenv:static]
description = Run static type checks
deps =
    pyright
    -r {tox_root}/requirements.txt
commands =
    pyright {posargs}

[testenv:integration]
description = Run integration tests
deps =
    pytest
    juju
    pytest-operator
    -r {tox_root}/requirements.txt
commands =
    pytest -v \
           -s \
           --tb native \
           --log-cli-level=INFO \
           {posargs} \
           {[vars]tests_path}/integration
